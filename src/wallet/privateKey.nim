import secp256k1 as ECDSA
import ../nimcrypto/nimcrypto/sysrand, ../nimcrypto/nimcrypto/utils

const
  KeyLength* = 256 div 8
  RawSignatureSize* = KeyLength * 2 + 1
  RawPublicKeySize* = KeyLength * 2

type
  PublicKey* = ECDSA.secp256k1_pubkey
    ## Representation of public key

  PrivateKey* = object
    ## Representation of secret key
    data*: array[KeyLength, byte]

  SharedSecret* = object
    ## Representation of ECDH shared secret
    data*: array[KeyLength, byte]

  KeyPair* = object
    ## Representation of private/public keys pair
    seckey*: PrivateKey
    pubkey*: PublicKey

  Signature* = ECDSA.secp256k1_ecdsa_recoverable_signature
    ## Representation of signature

  Secp256k1Exception* = object of Exception
    ## Exceptions generated by `libsecp256k1`


proc newPrivateKey*(): PrivateKey =
  # Generates new private key.
  # let ctx = getSecpContext()
  while true:
    if randomBytes(result.data) == KeyLength:
  if secp256k1_ec_seckey_verify(ctx, cast[ptr cuchar](addr result)) == 1:
    break
